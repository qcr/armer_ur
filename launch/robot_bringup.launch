<?xml version="1.0" ?>
<launch>
  <arg name="ur_model" default="ur10" />
  <arg name="ur_hw_version"  default="cb3" />
  <arg name="sim" default="false" />
  <arg name="load_gripper" default="false" />
  
  <!-- Handle armer configuration input -->
  <arg name="config_path" default="$(find armer_ur)/cfg" doc="The path to the armer configuration" />
  <arg name="config_name" default="$(arg ur_model)" doc="The name of the armer config" />
  <arg name="config" default="$(arg config_path)/$(arg config_name)_sim.yaml" if="$(arg sim)" />
  <arg name="config" default="$(arg config_path)/$(arg config_name)_$(arg ur_hw_model)_real.yaml" unless="$(arg sim)" />

  <!-- Handle description setup (armer) -->
  <arg name="description_root" default="example" />
  <arg name="description_key" default="ur" />
  <arg name="xacro_name" default="custom_env.xacro" if="$(arg load_gripper)"/>
  <arg name="xacro_name" default="standard_env.xacro" unless="$(arg load_gripper)"/>
  
  <!-- Load robot description from URDF -->
  <!-- NOTE: requires the armer_descriptions package -->
  <include file="$(find armer_descriptions)/launch/description.launch">
    <arg name="description_root" value="$(arg description_root)" />
    <arg name="description_key" value="$(arg description_key)" />
    <arg name="xacro_name" value="$(arg xacro_name)" />
    <arg name="robot_type" value="$(arg ur_model)" />
  </include> 
  
  <!-- Physical Robot -->
  <group unless="$(arg sim)">
    <!-- UR driver (CB3)-->  
    <group if="$(eval ur_hw_version == 'cb3')">
      <arg name="debug" default="false" doc="Debug flag that will get passed on to ur_common.launch"/>
      <arg name="robot_ip" default="192.168.125.11" doc="IP address by which the robot can be reached."/>
      <arg name="reverse_port" default="50001" doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller."/>
      <arg name="script_sender_port" default="50002" doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately."/>
      <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
      <arg name="controllers" default="joint_state_controller joint_group_vel_controller force_torque_sensor_controller" doc="Controllers that are activated by default."/>
      <arg name="stopped_controllers" default="pos_joint_traj_controller speed_scaling_state_controller scaled_pos_joint_traj_controller" doc="Controllers that are initally loaded, but not started."/>
      <arg name="controller_config_file" default="$(find ur_robot_driver)/config/$(arg ur_model)_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
      <arg name="robot_description_file" default="$(find ur_description)/launch/load_$(arg ur_model).launch" doc="Robot description launch file."/>
      <arg name="kinematics_config" default="$(find ur_description)/config/$(arg ur_model)/default_kinematics.yaml" doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description."/>
      <arg name="headless_mode" default="false" doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot."/>

      <include file="$(find ur_robot_driver)/launch/ur_common.launch" pass_all_args="true">
        <arg name="use_tool_communication" value="false"/>
      </include> 
    </group>

    <!-- UR driver (CB2) -->
    <group if="$(eval ur_hw_version == 'cb2')">
      <arg name="robot_ip" default="192.168.125.10" doc="IP address by which the robot can be reached."/>

      <include file="$(find ur_modern_driver)/launch/$(arg ur_model)_ros_control.launch">
        <arg name="robot_ip" value="$(arg robot_ip)" />
      </include>
    </group>

    <!-- Launch armer driver -->
    <!-- <include file="$(arg robot_description_launch)" /> -->
    <include file="$(find armer)/launch/armer.launch">
        <arg name="config" value="$(arg config)" />
    </include>
  </group>

  <!-- Simulated Robot -->
  <group if="$(arg sim)">
    <include file="$(find armer)/launch/armer.launch">
        <arg name="config" value="$(arg config)" />
    </include>
  </group>
</launch>
